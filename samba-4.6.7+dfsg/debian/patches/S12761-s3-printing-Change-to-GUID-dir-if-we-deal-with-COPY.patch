diff -ur a/source3/printing/nt_printing.c b/source3/printing/nt_printing.c
--- a/source3/printing/nt_printing.c	2017-02-09 08:45:27.000000000 +0100
+++ b/source3/printing/nt_printing.c	2017-07-16 13:08:03.093376510 +0200
@@ -666,16 +666,18 @@
 static uint32_t get_correct_cversion(struct auth_session_info *session_info,
 				   const char *architecture,
 				   const char *driverpath_in,
+				   const char *driver_directory,
 				   WERROR *perr)
 {
 	int cversion = -1;
 	NTSTATUS          nt_status;
 	struct smb_filename *smb_fname = NULL;
-	char *driverpath = NULL;
 	files_struct      *fsp = NULL;
 	connection_struct *conn = NULL;
 	char *oldcwd;
 	char *printdollar = NULL;
+	char *printdollar_path = NULL;
+	char *working_dir = NULL;
 	int printdollar_snum;
 
 	*perr = WERR_INVALID_PARAMETER;
@@ -704,12 +706,33 @@
 		return -1;
 	}
 
+	printdollar_path = lp_path(talloc_tos(), printdollar_snum);
+	if (printdollar_path == NULL) {
+		*perr = WERR_NOT_ENOUGH_MEMORY;
+		return -1;
+	}
+
+	working_dir = talloc_asprintf(talloc_tos(),
+				      "%s/%s",
+				      printdollar_path,
+				      architecture);
+	/*
+	 * If the driver has been uploaded into a temorpary driver
+	 * directory, switch to the driver directory.
+	 */
+	if (driver_directory != NULL) {
+		working_dir = talloc_asprintf(talloc_tos(), "%s/%s/%s",
+					      printdollar_path,
+					      architecture,
+					      driver_directory);
+	}
+
 	nt_status = create_conn_struct_cwd(talloc_tos(),
 					   server_event_context(),
 					   server_messaging_context(),
 					   &conn,
 					   printdollar_snum,
-					   lp_path(talloc_tos(), printdollar_snum),
+					   working_dir,
 					   session_info, &oldcwd);
 	if (!NT_STATUS_IS_OK(nt_status)) {
 		DEBUG(0,("get_correct_cversion: create_conn_struct "
@@ -731,18 +754,11 @@
 		goto error_free_conn;
 	}
 
-	/* Open the driver file (Portable Executable format) and determine the
-	 * deriver the cversion. */
-	driverpath = talloc_asprintf(talloc_tos(),
-					"%s/%s",
-					architecture,
-					driverpath_in);
-	if (!driverpath) {
-		*perr = WERR_NOT_ENOUGH_MEMORY;
-		goto error_exit;
-	}
-
-	nt_status = driver_unix_convert(conn, driverpath, &smb_fname);
+	/*
+	 * We switch to the directory where the driver files are located,
+	 * so only work on the file names
+	 */
+	nt_status = driver_unix_convert(conn, driverpath_in, &smb_fname);
 	if (!NT_STATUS_IS_OK(nt_status)) {
 		*perr = ntstatus_to_werror(nt_status);
 		goto error_exit;
@@ -956,8 +972,11 @@
 	 *	NT2K: cversion=3
 	 */
 
-	*version = get_correct_cversion(session_info, short_architecture,
-					*driver_path, &err);
+	*version = get_correct_cversion(session_info,
+					short_architecture,
+					*driver_path,
+					*driver_directory,
+					&err);
 	if (*version == -1) {
 		return err;
 	}
@@ -1374,7 +1393,7 @@
 {
 	int snum;
 	int n_services = lp_numservices();
-	bool in_use = False;
+	bool in_use = false;
 	struct spoolss_PrinterInfo2 *pinfo2 = NULL;
 	WERROR result;
 
@@ -1399,7 +1418,7 @@
 		}
 
 		if (strequal(r->driver_name, pinfo2->drivername)) {
-			in_use = True;
+			in_use = true;
 		}
 
 		TALLOC_FREE(pinfo2);
@@ -1416,26 +1435,31 @@
 		/* we can still remove the driver if there is one of
 		   "Windows NT x86" version 2 or 3 left */
 
-		if (!strequal("Windows NT x86", r->architecture)) {
+		if (strequal(SPOOLSS_ARCHITECTURE_NT_X86, r->architecture)) {
+			if (r->version == 2) {
+				werr = winreg_get_driver(mem_ctx, b,
+							 r->architecture,
+							 r->driver_name,
+							 3, &driver);
+			} else if (r->version == 3) {
+				werr = winreg_get_driver(mem_ctx, b,
+							 r->architecture,
+							 r->driver_name,
+							 2, &driver);
+			} else {
+				DBG_ERR("Unknown driver version (%d)\n",
+					r->version);
+				werr = WERR_UNKNOWN_PRINTER_DRIVER;
+			}
+		} else if (strequal(SPOOLSS_ARCHITECTURE_x64, r->architecture)) {
 			werr = winreg_get_driver(mem_ctx, b,
-						 "Windows NT x86",
+						 SPOOLSS_ARCHITECTURE_NT_X86,
 						 r->driver_name,
 						 DRIVER_ANY_VERSION,
 						 &driver);
-		} else if (r->version == 2) {
-			werr = winreg_get_driver(mem_ctx, b,
-						 "Windows NT x86",
-						 r->driver_name,
-						 3, &driver);
-		} else if (r->version == 3) {
-			werr = winreg_get_driver(mem_ctx, b,
-						 "Windows NT x86",
-						 r->driver_name,
-						 2, &driver);
 		} else {
-			DEBUG(0, ("printer_driver_in_use: ERROR!"
-				  " unknown driver version (%d)\n",
-				  r->version));
+			DBG_ERR("Unknown driver architecture: %s\n",
+				r->architecture);
 			werr = WERR_UNKNOWN_PRINTER_DRIVER;
 		}
 
@@ -1443,7 +1467,7 @@
 
 		if ( W_ERROR_IS_OK(werr) ) {
 			/* it's ok to remove the driver, we have other architctures left */
-			in_use = False;
+			in_use = false;
 			talloc_free(driver);
 		}
 	}
diff -ur a/source4/torture/rpc/spoolss.c b/source4/torture/rpc/spoolss.c
--- a/source4/torture/rpc/spoolss.c	2017-02-09 08:45:27.000000000 +0100
+++ b/source4/torture/rpc/spoolss.c	2017-07-16 13:08:03.133375863 +0200
@@ -11109,7 +11109,8 @@
 }
 
 static bool test_driver_copy_from_directory(struct torture_context *tctx,
-					    struct dcerpc_pipe *p)
+					    struct dcerpc_pipe *p,
+					    const char *architecture)
 {
 	struct torture_driver_context *d;
 	struct spoolss_StringArray *a;
@@ -11125,12 +11126,16 @@
 	d = talloc_zero(tctx, struct torture_driver_context);
 	torture_assert_not_null(tctx, d, "ENOMEM");
 
-	d->local.environment		=
-		talloc_asprintf(d, SPOOLSS_ARCHITECTURE_x64);
+	d->local.environment		= talloc_strdup(d, architecture);
 	torture_assert_not_null_goto(tctx, d->local.environment, ok, done, "ENOMEM");
 
-	d->local.driver_directory	=
-		talloc_asprintf(d, "/usr/share/cups/drivers/x64");
+	if (strequal(architecture, SPOOLSS_ARCHITECTURE_x64)) {
+		d->local.driver_directory =
+			talloc_strdup(d, "/usr/share/cups/drivers/x64");
+	} else {
+		d->local.driver_directory =
+			talloc_strdup(d, "/usr/share/cups/drivers/i386");
+	}
 	torture_assert_not_null_goto(tctx, d->local.driver_directory, ok, done, "ENOMEM");
 
 	d->remote.driver_upload_directory = GUID_string2(d, &guid);
@@ -11208,6 +11213,18 @@
 	return ok;
 }
 
+static bool test_driver_copy_from_directory_64(struct torture_context *tctx,
+					       struct dcerpc_pipe *p)
+{
+	return test_driver_copy_from_directory(tctx, p, SPOOLSS_ARCHITECTURE_x64);
+}
+
+static bool test_driver_copy_from_directory_32(struct torture_context *tctx,
+					       struct dcerpc_pipe *p)
+{
+	return test_driver_copy_from_directory(tctx, p, SPOOLSS_ARCHITECTURE_NT_X86);
+}
+
 static bool test_del_driver_all_files(struct torture_context *tctx,
 				      struct dcerpc_pipe *p)
 {
@@ -11401,8 +11418,12 @@
 	torture_rpc_tcase_add_test(tcase, "multiple_drivers", test_multiple_drivers);
 
 	torture_rpc_tcase_add_test(tcase,
-				   "test_driver_copy_from_directory",
-				   test_driver_copy_from_directory);
+				   "test_driver_copy_from_directory_64",
+				   test_driver_copy_from_directory_64);
+
+	torture_rpc_tcase_add_test(tcase,
+				   "test_driver_copy_from_directory_32",
+				   test_driver_copy_from_directory_32);
 
 	torture_rpc_tcase_add_test(tcase, "del_driver_all_files", test_del_driver_all_files);
 
